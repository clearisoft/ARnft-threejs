!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).ARnftThreejs={})}(this,(function(t){"use strict";class e{constructor(){this._hasFound=!1,this._interpolationFactor=15,this._frameDrops=0,this._deltaAccuracy=10,this.trackedMatrix={delta:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],interpolated:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}get deltaAccuracy(){return this._deltaAccuracy}set deltaAccuracy(t){this._deltaAccuracy=t}get interpolationFactor(){return this._interpolationFactor}set interpolationFactor(t){this._interpolationFactor=t}found(t){this.world=t}update(){if(this.world){let e=(new THREE.Matrix4).fromArray(this.getArrayMatrix(this.world));if(e.decompose(this.translation,this.rotation,this.scale),this._hasFound){let i=(new THREE.Vector3).setFromMatrixPosition(e);if(Math.abs(i.distanceTo(this._lastTranslation))>this._deltaAccuracy)return this._frameDrops+=1,void(this._frameDrops>3&&(this._lastTranslation=i));this._frameDrops=0,this._lastTranslation=i;for(t=0;t<16;t++)this.trackedMatrix.delta[t]=this.world[t]-this.trackedMatrix.interpolated[t],this.trackedMatrix.interpolated[t]=this.trackedMatrix.interpolated[t]+this.trackedMatrix.delta[t]/this._interpolationFactor}else{this._root.visible=!0;for(var t=0;t<16;t++)this.trackedMatrix.interpolated[t]=this.world[t];this._hasFound=!0,this._lastTranslation=(new THREE.Vector3).setFromMatrixPosition(e)}let i=(new THREE.Matrix4).fromArray(this.getArrayMatrix(this.trackedMatrix.interpolated)),r=new THREE.Matrix4;r.extractRotation(i);let a=(new THREE.Quaternion).setFromRotationMatrix(r),o=(new THREE.Euler).setFromQuaternion(a);this._root.setRotationFromEuler(o),this._root.position.set(this.translation.x,this.translation.y,this.translation.z)}else this._hasFound=!1,this._frameDrops=0,this._root.visible=!1}getArrayMatrix(t){var e=[];for(var i in t)e[i]=t[i];return e}static setMatrix(t,e){const i=[];for(const t in e)i[t]=e[t];"function"==typeof t.elements.set?t.elements.set(i):t.elements=[].slice.call(i)}}t.NFTImageTJS=class extends e{constructor(t){super(),this.imageRoot=t}addNFTImage(t,e,i){const r=new THREE.PlaneGeometry(e,i,30),a=(new THREE.TextureLoader).load(t),o=new THREE.MeshStandardMaterial({map:a}),s=new THREE.Mesh(r,o);this.imageRoot.add(s)}},t.NFTNodeTJS=e,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=ARnftThreejs.js.map
