{"version":3,"file":"ARnftThreejs.js","sources":["../src/utils/Utils.ts","../src/ARnftThreejs.ts","../src/markermedia/NFTaddTJS.ts"],"sourcesContent":["export class Utils {\n  private static trackedMatrix: any = {\n      // for interpolation\n      delta: [\n          0, 0, 0, 0,\n          0, 0, 0, 0,\n          0, 0, 0, 0,\n          0, 0, 0, 0\n      ],\n      interpolated: [\n          0, 0, 0, 0,\n          0, 0, 0, 0,\n          0, 0, 0, 0,\n          0, 0, 0, 0\n      ]\n  }\n  //private static interpolationFactor: number = 24\n  static interpolate (world: any) {\n    const interpolationFactor = 24\n\n    // interpolate matrix\n    for (let i = 0; i < 16; i++) {\n      this.trackedMatrix.delta[i] = world[i] - this.trackedMatrix.interpolated[i]\n      this.trackedMatrix.interpolated[i] =\n                  this.trackedMatrix.interpolated[i] +\n                  this.trackedMatrix.delta[i] / interpolationFactor\n     }\n     return this.trackedMatrix.interpolated\n   }\n\n  static isMobile () {\n    return /Android|mobile|iPad|iPhone/i.test(navigator.userAgent)\n  }\n\n  static setMatrix (matrix: any, value: any) {\n    const array: any = []\n    for (const key in value) {\n      array[key] = value[key]\n    }\n    if (typeof matrix.elements.set === 'function') {\n      matrix.elements.set(array)\n    } else {\n      matrix.elements = [].slice.call(array)\n    }\n  };\n}\n","import SceneRendererTJS from \"./SceneRendererTJS\"\nimport NFTaddTJS from \"./markermedia/NFTaddTJS\"\n\nexport default { SceneRendererTJS, NFTaddTJS }","import { Object3D,\n         PlaneGeometry,\n         TextureLoader,\n         VideoTexture,\n         Mesh,\n         MeshStandardMaterial } from 'three'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\n\ninterface ARvideo {\n  play: () => void;\n}\n\nexport default class NFTaddTJS {\n    private root: Object3D;\n    constructor(root: Object3D) {\n        this.root = root;\n    }\n    public add(mesh: Object3D) {\n        document.addEventListener('getNFTData', (ev: any) => {\n            var msg = ev.detail\n            mesh.position.y = (msg.height / msg.dpi * 2.54 * 10) / 2.0\n            mesh.position.x = (msg.width / msg.dpi * 2.54 * 10) / 2.0\n        })\n        this.root.add(mesh);\n    }\n    public addModel (url: string, x: number, y: number, z: number, scale: number) {\n        let model\n        /* Load Model */\n        const threeGLTFLoader = new GLTFLoader()\n        threeGLTFLoader.load(url, gltf => {\n            model = gltf.scene\n            model.scale.set(scale, scale, scale)\n            model.rotation.x = Math.PI / 2\n            model.position.x = x\n            model.position.y = y\n            model.position.z = z\n            this.root.add(model)\n        })\n    }\n    public addImage (imageUrl: string, color: string, scale: number) {\n       const planeGeom = new PlaneGeometry(1, 1, 1, 1)\n       const texture = new TextureLoader().load(imageUrl)\n       const material = new MeshStandardMaterial({ color: color, map: texture});\n       const plane = new Mesh(planeGeom, material)\n       plane.scale.set(scale, scale, scale)\n       document.addEventListener('getNFTData', (ev: any) => {\n            var msg = ev.detail\n            plane.position.y = (msg.height / msg.dpi * 2.54 * 10) / 2.0\n            plane.position.x = (msg.width / msg.dpi * 2.54 * 10) / 2.0\n       })\n       this.root.add(plane)\n    }\n    public addVideo (id: string, scale: number) {\n       const root = this.root\n       const ARVideo: HTMLVideoElement = document.getElementById(id) as HTMLVideoElement;\n       const texture = new VideoTexture(ARVideo as HTMLVideoElement)\n       const mat = new MeshStandardMaterial({ color: 0xbbbbff, map: texture })\n       ARVideo.play()\n       const planeGeom = new PlaneGeometry(1, 1, 1, 1)\n       const plane = new Mesh(planeGeom, mat)\n       plane.scale.set(scale, scale, scale)\n       document.addEventListener('getNFTData', (ev: any) => {\n           var msg = ev.detail\n           plane.position.y = (msg.height / msg.dpi * 2.54 * 10) / 2.0\n           plane.position.x = (msg.width / msg.dpi * 2.54 * 10) / 2.0\n       })\n       this.root.add(plane)\n    }\n}\n"],"names":["Utils","[object Object]","world","i","this","trackedMatrix","delta","interpolated","test","navigator","userAgent","matrix","value","array","key","elements","set","slice","call","SceneRendererTJS","NFTaddTJS","THREE"],"mappings":"0VAAaA,EAiBXC,mBAAoBC,GAIlB,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACtBC,KAAKC,cAAcC,MAAMH,GAAKD,EAAMC,GAAKC,KAAKC,cAAcE,aAAaJ,GACzEC,KAAKC,cAAcE,aAAaJ,GACpBC,KAAKC,cAAcE,aAAaJ,GAChCC,KAAKC,cAAcC,MAAMH,GAPX,GAS3B,OAAOC,KAAKC,cAAcE,aAG7BN,kBACE,MAAO,8BAA8BO,KAAKC,UAAUC,WAGtDT,iBAAkBU,EAAaC,GAC7B,MAAMC,EAAa,GACnB,IAAK,MAAMC,KAAOF,EAChBC,EAAMC,GAAOF,EAAME,GAEc,mBAAxBH,EAAOI,SAASC,IACzBL,EAAOI,SAASC,IAAIH,GAEpBF,EAAOI,SAAW,GAAGE,MAAMC,KAAKL,IAzCrBb,gBAAqB,CAEhCM,MAAO,CACH,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,GAEbC,aAAc,CACV,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,UCVJ,CAAEY,krDAAkBC,sZCqCNC,oCACFA,mCACCA,kDACHA,8PAYEA,4BACJA,wEAEMA,mCACJA"}